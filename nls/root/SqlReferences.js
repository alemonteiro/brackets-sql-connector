/*jshint node: true, jquery: true*/
/* globals brackets, define, Mustache */
define({
	mysql : [
		{name:'ABS()', desc: 'Return the absolute value '},
		{name:'ACOS()', desc: 'Return the arc cosine '},
		{name:'ADDDATE()', desc: 'Add time values (intervals) to a date value '},
		{name:'ADDTIME()', desc: 'Add time '},
		{name:'AES_DECRYPT()', desc: 'Decrypt using AES '},
		{name:'AES_ENCRYPT()', desc: 'Encrypt using AES '},
		{name:'AND, &&', desc: 'Logical AND '},
		{name:'ANY_VALUE()', desc: 'Suppress ONLY_FULL_GROUP_BY value rejection '},
		{name:'Area() (deprecated 5.7.6)', desc: 'Return Polygon or MultiPolygon area '},
		{name:'AsBinary(), AsWKB() (deprecated 5.7.6)', desc: 'Convert from internal geometry format to WKB '},
		{name:'ASCII()', desc: 'Return numeric value of left-most character '},
		{name:'ASIN()', desc: 'Return the arc sine '},
		{name:'=', desc: 'Assign a value (as part of a SET statement, or as part of the SET clause in an UPDATE statement) '},
		{name:':=', desc: 'Assign a value '},
		{name:'AsText(), AsWKT() (deprecated 5.7.6)', desc: 'Convert from internal geometry format to WKT '},
		{name:'ASYMMETRIC_DECRYPT()', desc: 'Decrypt ciphertext using private or public key '},
		{name:'ASYMMETRIC_DERIVE()', desc: 'Derive symmetric key from asymmetric keys '},
		{name:'ASYMMETRIC_ENCRYPT()', desc: 'Encrypt cleartext using private or public key '},
		{name:'ASYMMETRIC_SIGN()', desc: 'Generate signature from digest '},
		{name:'ASYMMETRIC_VERIFY()', desc: 'Verify that signature matches digest '},
		{name:'ATAN()', desc: 'Return the arc tangent '},
		{name:'ATAN2(), ATAN()', desc: 'Return the arc tangent of the two arguments '},
		{name:'AVG()', desc: 'Return the average value of the argument '},
		{name:'BENCHMARK()', desc: 'Repeatedly execute an expression '},
		{name:'BETWEEN ... AND ...', desc: 'Check whether a value is within a range of values '},
		{name:'BIN()', desc: 'Return a string containing binary representation of a number '},
		{name:'BINARY', desc: 'Cast a string to a binary string '},
		{name:'BIT_AND()', desc: 'Return bitwise AND '},
		{name:'BIT_COUNT()', desc: 'Return the number of bits that are set '},
		{name:'BIT_LENGTH()', desc: 'Return length of argument in bits '},
		{name:'BIT_OR()', desc: 'Return bitwise OR '},
		{name:'BIT_XOR()', desc: 'Return bitwise XOR '},
		{name:'&', desc: 'Bitwise AND '},
		{name:'~', desc: 'Bitwise inversion '},
		{name:'|', desc: 'Bitwise OR '},
		{name:'^', desc: 'Bitwise XOR '},
		{name:'Buffer() (deprecated 5.7.6)', desc: 'Return geometry of points within given distance from geometry '},
		{name:'CASE', desc: 'Case operator '},
		{name:'CAST()', desc: 'Cast a value as a certain type '},
		{name:'CEIL()', desc: 'Return the smallest integer value not less than the argument '},
		{name:'CEILING()', desc: 'Return the smallest integer value not less than the argument '},
		{name:'Centroid() (deprecated 5.7.6)', desc: 'Return centroid as a point '},
		{name:'CHAR()', desc: 'Return the character for each integer passed '},
		{name:'CHAR_LENGTH()', desc: 'Return number of characters in argument '},
		{name:'CHARACTER_LENGTH()', desc: 'Synonym for CHAR_LENGTH() '},
		{name:'CHARSET()', desc: 'Return the character set of the argument '},
		{name:'COALESCE()', desc: 'Return the first non-NULL argument '},
		{name:'COERCIBILITY()', desc: 'Return the collation coercibility value of the string argument '},
		{name:'COLLATION()', desc: 'Return the collation of the string argument '},
		{name:'COMPRESS()', desc: 'Return result as a binary string '},
		{name:'CONCAT()', desc: 'Return concatenated string '},
		{name:'CONCAT_WS()', desc: 'Return concatenate with separator '},
		{name:'CONNECTION_ID()', desc: 'Return the connection ID (thread ID) for the connection '},
		{name:'Contains() (deprecated 5.7.6)', desc: 'Whether MBR of one geometry contains MBR of another '},
		{name:'CONV()', desc: 'Convert numbers between different number bases '},
		{name:'CONVERT()', desc: 'Cast a value as a certain type '},
		{name:'CONVERT_TZ()', desc: 'Convert from one timezone to another '},
		{name:'ConvexHull() (deprecated 5.7.6)', desc: 'Return convex hull of geometry '},
		{name:'COS()', desc: 'Return the cosine '},
		{name:'COT()', desc: 'Return the cotangent '},
		{name:'COUNT()', desc: 'Return a count of the number of rows returned '},
		{name:'COUNT(DISTINCT)', desc: 'Return the count of a number of different values '},
		{name:'CRC32()', desc: 'Compute a cyclic redundancy check value '},
		{name:'CREATE_ASYMMETRIC_PRIV_KEY()', desc: 'Create private key '},
		{name:'CREATE_ASYMMETRIC_PUB_KEY()', desc: 'Create public key '},
		{name:'CREATE_DH_PARAMETERS()', desc: 'Generate shared DH secret '},
		{name:'CREATE_DIGEST()', desc: 'Generate digest from string '},
		{name:'Crosses() (deprecated 5.7.6)', desc: 'Whether one geometry crosses another '},
		{name:'CURDATE()', desc: 'Return the current date '},
		{name:'CURRENT_DATE(), CURRENT_DATE', desc: 'Synonyms for CURDATE() '},
		{name:'CURRENT_TIME(), CURRENT_TIME', desc: 'Synonyms for CURTIME() '},
		{name:'CURRENT_TIMESTAMP(), CURRENT_TIMESTAMP', desc: 'Synonyms for NOW() '},
		{name:'CURRENT_USER(), CURRENT_USER', desc: 'The authenticated user name and host name '},
		{name:'CURTIME()', desc: 'Return the current time '},
		{name:'DATABASE()', desc: 'Return the default (current) database name '},
		{name:'DATE()', desc: 'Extract the date part of a date or datetime expression '},
		{name:'DATE_ADD()', desc: 'Add time values (intervals) to a date value '},
		{name:'DATE_FORMAT()', desc: 'Format date as specified '},
		{name:'DATE_SUB()', desc: 'Subtract a time value (interval) from a date '},
		{name:'DATEDIFF()', desc: 'Subtract two dates '},
		{name:'DAY()', desc: 'Synonym for DAYOFMONTH() '},
		{name:'DAYNAME()', desc: 'Return the name of the weekday '},
		{name:'DAYOFMONTH()', desc: 'Return the day of the month (0-31) '},
		{name:'DAYOFWEEK()', desc: 'Return the weekday index of the argument '},
		{name:'DAYOFYEAR()', desc: 'Return the day of the year (1-366) '},
		{name:'DECODE()', desc: 'Decodes a string encrypted using ENCODE() '},
		{name:'DEFAULT()', desc: 'Return the default value for a table column '},
		{name:'DEGREES()', desc: 'Convert radians to degrees '},
		{name:'DES_DECRYPT() (deprecated 5.7.6)', desc: 'Decrypt a string '},
		{name:'DES_ENCRYPT() (deprecated 5.7.6)', desc: 'Encrypt a string '},
		{name:'Dimension() (deprecated 5.7.6)', desc: 'Dimension of geometry '},
		{name:'Disjoint() (deprecated 5.7.6)', desc: 'Whether MBRs of two geometries are disjoint '},
		{name:'Distance() (deprecated 5.7.6)', desc: 'The distance of one geometry from another '},
		{name:'DIV', desc: 'Integer division '},
		{name:'/', desc: 'Division operator '},
		{name:'ELT()', desc: 'Return string at index number '},
		{name:'ENCODE()', desc: 'Encode a string '},
		{name:'ENCRYPT() (deprecated 5.7.6)', desc: 'Encrypt a string '},
		{name:'EndPoint() (deprecated 5.7.6)', desc: 'End Point of LineString '},
		{name:'Envelope() (deprecated 5.7.6)', desc: 'Return MBR of geometry '},
		{name:'=', desc: 'Equal operator '},
		{name:'<=>', desc: 'NULL-safe equal to operator '},
		{name:'Equals() (deprecated 5.7.6)', desc: 'Whether MBRs of two geometries are equal '},
		{name:'EXP()', desc: 'Raise to the power of '},
		{name:'EXPORT_SET()', desc: 'Return a string such that for every bit set in the value bits, you get an on string and for every unset bit, you get an off string '},
		{name:'ExteriorRing() (deprecated 5.7.6)', desc: 'Return exterior ring of Polygon '},
		{name:'EXTRACT()', desc: 'Extract part of a date '},
		{name:'ExtractValue()', desc: 'Extracts a value from an XML string using XPath notation '},
		{name:'FIELD()', desc: 'Return the index (position) of the first argument in the subsequent arguments '},
		{name:'FIND_IN_SET()', desc: 'Return the index position of the first argument within the second argument '},
		{name:'FLOOR()', desc: 'Return the largest integer value not greater than the argument '},
		{name:'FORMAT()', desc: 'Return a number formatted to specified number of decimal places '},
		{name:'FOUND_ROWS()', desc: 'For a SELECT with a LIMIT clause, the number of rows that would be returned were there no LIMIT clause '},
		{name:'FROM_BASE64()', desc: 'Decode to a base-64 string and return result '},
		{name:'FROM_DAYS()', desc: 'Convert a day number to a date '},
		{name:'FROM_UNIXTIME()', desc: 'Format UNIX timestamp as a date '},
		{name:'GeomCollFromText(), GeometryCollectionFromText() (deprecated 5.7.6)', desc: 'Return geometry collection from WKT '},
		{name:'GeomCollFromWKB(), GeometryCollectionFromWKB() (deprecated 5.7.6)', desc: 'Return geometry collection from WKB '},
		{name:'GeometryCollection()', desc: 'Construct geometry collection from geometries '},
		{name:'GeometryN() (deprecated 5.7.6)', desc: 'Return N-th geometry from geometry collection '},
		{name:'GeometryType() (deprecated 5.7.6)', desc: 'Return name of geometry type '},
		{name:'GeomFromText(), GeometryFromText() (deprecated 5.7.6)', desc: 'Return geometry from WKT '},
		{name:'GeomFromWKB(), GeometryFromWKB() (deprecated 5.7.6)', desc: 'Return geometry from WKB '},
		{name:'GET_FORMAT()', desc: 'Return a date format string '},
		{name:'GET_LOCK()', desc: 'Get a named lock '},
		{name:'GLength() (deprecated 5.7.6)', desc: 'Return length of LineString '},
		{name:'>', desc: 'Greater than operator '},
		{name:'>=', desc: 'Greater than or equal operator '},
		{name:'GREATEST()', desc: 'Return the largest argument '},
		{name:'GROUP_CONCAT()', desc: 'Return a concatenated string '},
		{name:'GTID_SUBSET()', desc: 'Return true if all GTIDs in subset are also in set; otherwise false. '},
		{name:'GTID_SUBTRACT()', desc: 'Return all GTIDs in set that are not in subset. '},
		{name:'HEX()', desc: 'Return a hexadecimal representation of a decimal or string value '},
		{name:'HOUR()', desc: 'Extract the hour '},
		{name:'IF()', desc: 'If/else construct '},
		{name:'IFNULL()', desc: 'Null if/else construct '},
		{name:'IN()', desc: 'Check whether a value is within a set of values '},
		{name:'INET_ATON()', desc: 'Return the numeric value of an IP address '},
		{name:'INET_NTOA()', desc: 'Return the IP address from a numeric value '},
		{name:'INET6_ATON()', desc: 'Return the numeric value of an IPv6 address '},
		{name:'INET6_NTOA()', desc: 'Return the IPv6 address from a numeric value '},
		{name:'INSERT()', desc: 'Insert a substring at the specified position up to the specified number of characters '},
		{name:'INSTR()', desc: 'Return the index of the first occurrence of substring '},
		{name:'InteriorRingN() (deprecated 5.7.6)', desc: 'Return N-th interior ring of Polygon '},
		{name:'Intersects() (deprecated 5.7.6)', desc: 'Whether MBRs of two geometries intersect '},
		{name:'INTERVAL()', desc: 'Return the index of the argument that is less than the first argument '},
		{name:'IS', desc: 'Test a value against a boolean '},
		{name:'IS_FREE_LOCK()', desc: 'Whether the named lock is free '},
		{name:'IS_IPV4()', desc: 'Whether argument is an IPv4 address '},
		{name:'IS_IPV4_COMPAT()', desc: 'Whether argument is an IPv4-compatible address '},
		{name:'IS_IPV4_MAPPED()', desc: 'Whether argument is an IPv4-mapped address '},
		{name:'IS_IPV6()', desc: 'Whether argument is an IPv6 address '},
		{name:'IS NOT', desc: 'Test a value against a boolean '},
		{name:'IS NOT NULL', desc: 'NOT NULL value test '},
		{name:'IS NULL', desc: 'NULL value test '},
		{name:'IS_USED_LOCK()', desc: 'Whether the named lock is in use; return connection identifier if true '},
		{name:'IsClosed() (deprecated 5.7.6)', desc: 'Whether a geometry is closed and simple '},
		{name:'IsEmpty() (deprecated 5.7.6)', desc: 'Placeholder function '},
		{name:'ISNULL()', desc: 'Test whether the argument is NULL '},
		{name:'IsSimple() (deprecated 5.7.6)', desc: 'Whether a geometry is simple '},
		{name:'JSON_APPEND()', desc: 'Append data to JSON document '},
		{name:'JSON_ARRAY()', desc: 'Create JSON array '},
		{name:'JSON_ARRAY_APPEND()', desc: 'Append data to JSON document '},
		{name:'JSON_ARRAY_INSERT()', desc: 'Insert into JSON array '},
		{name:'->', desc: 'Return value from JSON column after evaluating path; equivalent to JSON_EXTRACT(). '},
		{name:'JSON_CONTAINS()', desc: 'Whether JSON document contains specific object at path '},
		{name:'JSON_CONTAINS_PATH()', desc: 'Whether JSON document contains any data at path '},
		{name:'JSON_DEPTH()', desc: 'Maximum depth of JSON document '},
		{name:'JSON_EXTRACT()', desc: 'Return data from JSON document '},
		{name:'JSON_INSERT()', desc: 'Insert data into JSON document '},
		{name:'JSON_KEYS()', desc: 'Array of keys from JSON document '},
		{name:'JSON_LENGTH()', desc: 'Number of elements in JSON document '},
		{name:'JSON_MERGE()', desc: 'Merge JSON documents '},
		{name:'JSON_OBJECT()', desc: 'Create JSON object '},
		{name:'JSON_QUOTE()', desc: 'Quote JSON document '},
		{name:'JSON_REMOVE()', desc: 'Remove data from JSON document '},
		{name:'JSON_REPLACE()', desc: 'Replace values in JSON document '},
		{name:'JSON_SEARCH()', desc: 'Path to value within JSON document '},
		{name:'JSON_SET()', desc: 'Insert data into JSON document '},
		{name:'JSON_TYPE()', desc: 'Type of JSON value '},
		{name:'JSON_UNQUOTE()', desc: 'Unquote JSON value '},
		{name:'JSON_VALID()', desc: 'Whether JSON value is valid '},
		{name:'LAST_DAY', desc: 'Return the last day of the month for the argument '},
		{name:'LAST_INSERT_ID()', desc: 'Value of the AUTOINCREMENT column for the last INSERT '},
		{name:'LCASE()', desc: 'Synonym for LOWER() '},
		{name:'LEAST()', desc: 'Return the smallest argument '},
		{name:'LEFT()', desc: 'Return the leftmost number of characters as specified '},
		{name:'<<', desc: 'Left shift '},
		{name:'LENGTH()', desc: 'Return the length of a string in bytes '},
		{name:'<', desc: 'Less than operator '},
		{name:'<=', desc: 'Less than or equal operator '},
		{name:'LIKE', desc: 'Simple pattern matching '},
		{name:'LineFromText(), LineStringFromText() (deprecated 5.7.6)', desc: 'Construct LineString from WKT '},
		{name:'LineFromWKB(), LineStringFromWKB() (deprecated 5.7.6)', desc: 'Construct LineString from WKB '},
		{name:'LineString()', desc: 'Construct LineString from Point values '},
		{name:'LN()', desc: 'Return the natural logarithm of the argument '},
		{name:'LOAD_FILE()', desc: 'Load the named file '},
		{name:'LOCALTIME(), LOCALTIME', desc: 'Synonym for NOW() '},
		{name:'LOCALTIMESTAMP, LOCALTIMESTAMP()', desc: 'Synonym for NOW() '},
		{name:'LOCATE()', desc: 'Return the position of the first occurrence of substring '},
		{name:'LOG()', desc: 'Return the natural logarithm of the first argument '},
		{name:'LOG10()', desc: 'Return the base-10 logarithm of the argument '},
		{name:'LOG2()', desc: 'Return the base-2 logarithm of the argument '},
		{name:'LOWER()', desc: 'Return the argument in lowercase '},
		{name:'LPAD()', desc: 'Return the string argument, left-padded with the specified string '},
		{name:'LTRIM()', desc: 'Remove leading spaces '},
		{name:'MAKE_SET()', desc: 'Return a set of comma-separated strings that have the corresponding bit in bits set '},
		{name:'MAKEDATE()', desc: 'Create a date from the year and day of year '},
		{name:'MAKETIME()', desc: 'Create time from hour, minute, second '},
		{name:'MASTER_POS_WAIT()', desc: 'Block until the slave has read and applied all updates up to the specified position '},
		{name:'MATCH', desc: 'Perform full-text search '},
		{name:'MAX()', desc: 'Return the maximum value '},
		{name:'MBRContains()', desc: 'Whether MBR of one geometry contains MBR of another '},
		{name:'MBRCoveredBy()', desc: 'Whether one MBR is covered by another '},
		{name:'MBRCovers()', desc: 'Whether one MBR covers another '},
		{name:'MBRDisjoint()', desc: 'Whether MBRs of two geometries are disjoint '},
		{name:'MBREqual() (deprecated 5.7.6)', desc: 'Whether MBRs of two geometries are equal '},
		{name:'MBREquals()', desc: 'Whether MBRs of two geometries are equal '},
		{name:'MBRIntersects()', desc: 'Whether MBRs of two geometries intersect '},
		{name:'MBROverlaps()', desc: 'Whether MBRs of two geometries overlap '},
		{name:'MBRTouches()', desc: 'Whether MBRs of two geometries touch '},
		{name:'MBRWithin()', desc: 'Whether MBR of one geometry is within MBR of another '},
		{name:'MD5()', desc: 'Calculate MD5 checksum '},
		{name:'MICROSECOND()', desc: 'Return the microseconds from argument '},
		{name:'MID()', desc: 'Return a substring starting from the specified position '},
		{name:'MIN()', desc: 'Return the minimum value '},
		{name:'-', desc: 'Minus operator '},
		{name:'MINUTE()', desc: 'Return the minute from the argument '},
		{name:'MLineFromText(), MultiLineStringFromText() (deprecated 5.7.6)', desc: 'Construct MultiLineString from WKT '},
		{name:'MLineFromWKB(), MultiLineStringFromWKB() (deprecated 5.7.6)', desc: 'Construct MultiLineString from WKB '},
		{name:'MOD()', desc: 'Return the remainder '},
		{name:'%, MOD', desc: 'Modulo operator '},
		{name:'MONTH()', desc: 'Return the month from the date passed '},
		{name:'MONTHNAME()', desc: 'Return the name of the month '},
		{name:'MPointFromText(), MultiPointFromText() (deprecated 5.7.6)', desc: 'Construct MultiPoint from WKT '},
		{name:'MPointFromWKB(), MultiPointFromWKB() (deprecated 5.7.6)', desc: 'Construct MultiPoint from WKB '},
		{name:'MPolyFromText(), MultiPolygonFromText() (deprecated 5.7.6)', desc: 'Construct MultiPolygon from WKT '},
		{name:'MPolyFromWKB(), MultiPolygonFromWKB() (deprecated 5.7.6)', desc: 'Construct MultiPolygon from WKB '},
		{name:'MultiLineString()', desc: 'Contruct MultiLineString from LineString values '},
		{name:'MultiPoint()', desc: 'Construct MultiPoint from Point values '},
		{name:'MultiPolygon()', desc: 'Construct MultiPolygon from Polygon values '},
		{name:'NAME_CONST()', desc: 'Causes the column to have the given name '},
		{name:'NOT, !', desc: 'Negates value '},
		{name:'NOT BETWEEN ... AND ...', desc: 'Check whether a value is not within a range of values '},
		{name:'!=, <>', desc: 'Not equal operator '},
		{name:'NOT IN()', desc: 'Check whether a value is not within a set of values '},
		{name:'NOT LIKE', desc: 'Negation of simple pattern matching '},
		{name:'NOT REGEXP', desc: 'Negation of REGEXP '},
		{name:'NOW()', desc: 'Return the current date and time '},
		{name:'NULLIF()', desc: 'Return NULL if expr1 = expr2 '},
		{name:'NumGeometries() (deprecated 5.7.6)', desc: 'Return number of geometries in geometry collection '},
		{name:'NumInteriorRings() (deprecated 5.7.6)', desc: 'Return number of interior rings in Polygon '},
		{name:'NumPoints() (deprecated 5.7.6)', desc: 'Return number of points in LineString '},
		{name:'OCT()', desc: 'Return a string containing octal representation of a number '},
		{name:'OCTET_LENGTH()', desc: 'Synonym for LENGTH() '},
		{name:'OLD_PASSWORD()', desc: 'Return the value of the pre-4.1 implementation of PASSWORD '},
		{name:'||, OR', desc: 'Logical OR '},
		{name:'ORD()', desc: 'Return character code for leftmost character of the argument '},
		{name:'Overlaps() (deprecated 5.7.6)', desc: 'Whether MBRs of two geometries overlap '},
		{name:'PASSWORD() (deprecated 5.7.6)', desc: 'Calculate and return a password string '},
		{name:'PERIOD_ADD()', desc: 'Add a period to a year-month '},
		{name:'PERIOD_DIFF()', desc: 'Return the number of months between periods '},
		{name:'PI()', desc: 'Return the value of pi '},
		{name:'+', desc: 'Addition operator '},
		{name:'Point()', desc: 'Construct Point from coordinates '},
		{name:'PointFromText() (deprecated 5.7.6)', desc: 'Construct Point from WKT '},
		{name:'PointFromWKB() (deprecated 5.7.6)', desc: 'Construct Point from WKB '},
		{name:'PointN() (deprecated 5.7.6)', desc: 'Return N-th point from LineString '},
		{name:'PolyFromText(), PolygonFromText() (deprecated 5.7.6)', desc: 'Construct Polygon from WKT '},
		{name:'PolyFromWKB(), PolygonFromWKB() (deprecated 5.7.6)', desc: 'Construct Polygon from WKB '},
		{name:'Polygon()', desc: 'Construct Polygon from LineString arguments '},
		{name:'POSITION()', desc: 'Synonym for LOCATE() '},
		{name:'POW()', desc: 'Return the argument raised to the specified power '},
		{name:'POWER()', desc: 'Return the argument raised to the specified power '},
		{name:'PROCEDURE ANALYSE()', desc: 'Analyze the results of a query '},
		{name:'QUARTER()', desc: 'Return the quarter from a date argument '},
		{name:'QUOTE()', desc: 'Escape the argument for use in an SQL statement '},
		{name:'RADIANS()', desc: 'Return argument converted to radians '},
		{name:'RAND()', desc: 'Return a random floating-point value '},
		{name:'RANDOM_BYTES()', desc: 'Return a random byte vector '},
		{name:'REGEXP', desc: 'Pattern matching using regular expressions '},
		{name:'RELEASE_ALL_LOCKS()', desc: 'Releases all current named locks '},
		{name:'RELEASE_LOCK()', desc: 'Releases the named lock '},
		{name:'REPEAT()', desc: 'Repeat a string the specified number of times '},
		{name:'REPLACE()', desc: 'Replace occurrences of a specified string '},
		{name:'REVERSE()', desc: 'Reverse the characters in a string '},
		{name:'RIGHT()', desc: 'Return the specified rightmost number of characters '},
		{name:'>>', desc: 'Right shift '},
		{name:'RLIKE', desc: 'Synonym for REGEXP '},
		{name:'ROUND()', desc: 'Round the argument '},
		{name:'ROW_COUNT()', desc: 'The number of rows updated '},
		{name:'RPAD()', desc: 'Append string the specified number of times '},
		{name:'RTRIM()', desc: 'Remove trailing spaces '},
		{name:'SCHEMA()', desc: 'Synonym for DATABASE() '},
		{name:'SEC_TO_TIME()', desc: 'Converts seconds to "HH:MM:SS" format '},
		{name:'SECOND()', desc: 'Return the second (0-59) '},
		{name:'SESSION_USER()', desc: 'Synonym for USER() '},
		{name:'SHA1(), SHA()', desc: 'Calculate an SHA-1 160-bit checksum '},
		{name:'SHA2()', desc: 'Calculate an SHA-2 checksum '},
		{name:'SIGN()', desc: 'Return the sign of the argument '},
		{name:'SIN()', desc: 'Return the sine of the argument '},
		{name:'SLEEP()', desc: 'Sleep for a number of seconds '},
		{name:'SOUNDEX()', desc: 'Return a soundex string '},
		{name:'SOUNDS LIKE', desc: 'Compare sounds '},
		{name:'SPACE()', desc: 'Return a string of the specified number of spaces '},
		{name:'SQRT()', desc: 'Return the square root of the argument '},
		{name:'SRID() (deprecated 5.7.6)', desc: 'Return spatial reference system ID for geometry '},
		{name:'ST_Area()', desc: 'Return Polygon or MultiPolygon area '},
		{name:'ST_AsBinary(), ST_AsWKB()', desc: 'Convert from internal geometry format to WKB '},
		{name:'ST_AsGeoJSON()', desc: 'Generate GeoJSON object from geometry '},
		{name:'ST_AsText(), ST_AsWKT()', desc: 'Convert from internal geometry format to WKT '},
		{name:'ST_Buffer()', desc: 'Return geometry of points within given distance from geometry '},
		{name:'ST_Buffer_Strategy()', desc: 'Produce strategy option for ST_Buffer() '},
		{name:'ST_Centroid()', desc: 'Return centroid as a point '},
		{name:'ST_Contains()', desc: 'Whether one geometry contains another '},
		{name:'ST_ConvexHull()', desc: 'Return convex hull of geometry '},
		{name:'ST_Crosses()', desc: 'Whether one geometry crosses another '},
		{name:'ST_Difference()', desc: 'Return point set difference of two geometries '},
		{name:'ST_Dimension()', desc: 'Dimension of geometry '},
		{name:'ST_Disjoint()', desc: 'Whether one geometry is disjoint from another '},
		{name:'ST_Distance()', desc: 'The distance of one geometry from another '},
		{name:'ST_Distance_Sphere()', desc: 'Minimum distance on earth between two geometries '},
		{name:'ST_EndPoint()', desc: 'End Point of LineString '},
		{name:'ST_Envelope()', desc: 'Return MBR of geometry '},
		{name:'ST_Equals()', desc: 'Whether one geometry is equal to another '},
		{name:'ST_ExteriorRing()', desc: 'Return exterior ring of Polygon '},
		{name:'ST_GeoHash()', desc: 'Produce a geohash value '},
		{name:'ST_GeomCollFromText(), ST_GeometryCollectionFromText(), ST_GeomCollFromTxt()', desc: 'Return geometry collection from WKT '},
		{name:'ST_GeomCollFromWKB(), ST_GeometryCollectionFromWKB()', desc: 'Return geometry collection from WKB '},
		{name:'ST_GeometryN()', desc: 'Return N-th geometry from geometry collection '},
		{name:'ST_GeometryType()', desc: 'Return name of geometry type '},
		{name:'ST_GeomFromGeoJSON()', desc: 'Generate geometry from GeoJSON object '},
		{name:'ST_GeomFromText(), ST_GeometryFromText()', desc: 'Return geometry from WKT '},
		{name:'ST_GeomFromWKB(), ST_GeometryFromWKB()', desc: 'Return geometry from WKB '},
		{name:'ST_InteriorRingN()', desc: 'Return N-th interior ring of Polygon '},
		{name:'ST_Intersection()', desc: 'Return point set intersection of two geometries '},
		{name:'ST_Intersects()', desc: 'Whether one geometry intersects another '},
		{name:'ST_IsClosed()', desc: 'Whether a geometry is closed and simple '},
		{name:'ST_IsEmpty()', desc: 'Placeholder function '},
		{name:'ST_IsSimple()', desc: 'Whether a geometry is simple '},
		{name:'ST_IsValid()', desc: 'Whether a geometry is valid '},
		{name:'ST_LatFromGeoHash()', desc: 'Return latitude from geohash value '},
		{name:'ST_Length()', desc: 'Return length of LineString '},
		{name:'ST_LineFromText(), ST_LineStringFromText()', desc: 'Construct LineString from WKT '},
		{name:'ST_LineFromWKB(), ST_LineStringFromWKB()', desc: 'Construct LineString from WKB '},
		{name:'ST_LongFromGeoHash()', desc: 'Return longitude from geohash value '},
		{name:'ST_MakeEnvelope()', desc: 'Rectangle around two points '},
		{name:'ST_MLineFromText(), ST_MultiLineStringFromText()', desc: 'Construct MultiLineString from WKT '},
		{name:'ST_MLineFromWKB(), ST_MultiLineStringFromWKB()', desc: 'Construct MultiLineString from WKB '},
		{name:'ST_MPointFromText(), ST_MultiPointFromText()', desc: 'Construct MultiPoint from WKT '},
		{name:'ST_MPointFromWKB(), ST_MultiPointFromWKB()', desc: 'Construct MultiPoint from WKB '},
		{name:'ST_MPolyFromText(), ST_MultiPolygonFromText()', desc: 'Construct MultiPolygon from WKT '},
		{name:'ST_MPolyFromWKB(), ST_MultiPolygonFromWKB()', desc: 'Construct MultiPolygon from WKB '},
		{name:'ST_NumGeometries()', desc: 'Return number of geometries in geometry collection '},
		{name:'ST_NumInteriorRing(), ST_NumInteriorRings()', desc: 'Return number of interior rings in Polygon '},
		{name:'ST_NumPoints()', desc: 'Return number of points in LineString '},
		{name:'ST_Overlaps()', desc: 'Whether one geometry overlaps another '},
		{name:'ST_PointFromGeoHash()', desc: 'Convert geohash value to POINT value '},
		{name:'ST_PointFromText()', desc: 'Construct Point from WKT '},
		{name:'ST_PointFromWKB()', desc: 'Construct Point from WKB '},
		{name:'ST_PointN()', desc: 'Return N-th point from LineString '},
		{name:'ST_PolyFromText(), ST_PolygonFromText()', desc: 'Construct Polygon from WKT '},
		{name:'ST_PolyFromWKB(), ST_PolygonFromWKB()', desc: 'Construct Polygon from WKB '},
		{name:'ST_Simplify()', desc: 'Return simplified geometry '},
		{name:'ST_SRID()', desc: 'Return spatial reference system ID for geometry '},
		{name:'ST_StartPoint()', desc: 'Start Point of LineString '},
		{name:'ST_SymDifference()', desc: 'Return point set symmetric difference of two geometries '},
		{name:'ST_Touches()', desc: 'Whether one geometry touches another '},
		{name:'ST_Union()', desc: 'Return point set union of two geometries '},
		{name:'ST_Validate()', desc: 'Return validated geometry '},
		{name:'ST_Within()', desc: 'Whether one geometry is within another '},
		{name:'ST_X()', desc: 'Return X coordinate of Point '},
		{name:'ST_Y()', desc: 'Return Y coordinate of Point '},
		{name:'StartPoint() (deprecated 5.7.6)', desc: 'Start Point of LineString '},
		{name:'STD()', desc: 'Return the population standard deviation '},
		{name:'STDDEV()', desc: 'Return the population standard deviation '},
		{name:'STDDEV_POP()', desc: 'Return the population standard deviation '},
		{name:'STDDEV_SAMP()', desc: 'Return the sample standard deviation '},
		{name:'STR_TO_DATE()', desc: 'Convert a string to a date '},
		{name:'STRCMP()', desc: 'Compare two strings '},
		{name:'SUBDATE()', desc: 'Synonym for DATE_SUB() when invoked with three arguments '},
		{name:'SUBSTR()', desc: 'Return the substring as specified '},
		{name:'SUBSTRING()', desc: 'Return the substring as specified '},
		{name:'SUBSTRING_INDEX()', desc: 'Return a substring from a string before the specified number of occurrences of the delimiter '},
		{name:'SUBTIME()', desc: 'Subtract times '},
		{name:'SUM()', desc: 'Return the sum '},
		{name:'SYSDATE()', desc: 'Return the time at which the function executes '},
		{name:'SYSTEM_USER()', desc: 'Synonym for USER() '},
		{name:'TAN()', desc: 'Return the tangent of the argument '},
		{name:'TIME()', desc: 'Extract the time portion of the expression passed '},
		{name:'TIME_FORMAT()', desc: 'Format as time '},
		{name:'TIME_TO_SEC()', desc: 'Return the argument converted to seconds '},
		{name:'TIMEDIFF()', desc: 'Subtract time '},
		{name:'*', desc: 'Multiplication operator '},
		{name:'TIMESTAMP()', desc: 'With a single argument, this function returns the date or datetime expression; with two arguments, the sum of the arguments '},
		{name:'TIMESTAMPADD()', desc: 'Add an interval to a datetime expression '},
		{name:'TIMESTAMPDIFF()', desc: 'Subtract an interval from a datetime expression '},
		{name:'TO_BASE64()', desc: 'Return the argument converted to a base-64 string '},
		{name:'TO_DAYS()', desc: 'Return the date argument converted to days '},
		{name:'TO_SECONDS()', desc: 'Return the date or datetime argument converted to seconds since Year 0 '},
		{name:'Touches() (deprecated 5.7.6)', desc: 'Whether one geometry touches another '},
		{name:'TRIM()', desc: 'Remove leading and trailing spaces '},
		{name:'TRUNCATE()', desc: 'Truncate to specified number of decimal places '},
		{name:'UCASE()', desc: 'Synonym for UPPER() '},
		{name:'-', desc: 'Change the sign of the argument '},
		{name:'UNCOMPRESS()', desc: 'Uncompress a string compressed '},
		{name:'UNCOMPRESSED_LENGTH()', desc: 'Return the length of a string before compression '},
		{name:'UNHEX()', desc: 'Return a string containing hex representation of a number '},
		{name:'UNIX_TIMESTAMP()', desc: 'Return a UNIX timestamp '},
		{name:'UpdateXML()', desc: 'Return replaced XML fragment '},
		{name:'UPPER()', desc: 'Convert to uppercase '},
		{name:'USER()', desc: 'The user name and host name provided by the client '},
		{name:'UTC_DATE()', desc: 'Return the current UTC date '},
		{name:'UTC_TIME()', desc: 'Return the current UTC time '},
		{name:'UTC_TIMESTAMP()', desc: 'Return the current UTC date and time '},
		{name:'UUID()', desc: 'Return a Universal Unique Identifier (UUID) '},
		{name:'UUID_SHORT()', desc: 'Return an integer-valued universal identifier '},
		{name:'VALIDATE_PASSWORD_STRENGTH()', desc: 'Determine strength of password '},
		{name:'VALUES()', desc: 'Defines the values to be used during an INSERT '},
		{name:'VAR_POP()', desc: 'Return the population standard variance '},
		{name:'VAR_SAMP()', desc: 'Return the sample variance '},
		{name:'VARIANCE()', desc: 'Return the population standard variance '},
		{name:'VERSION()', desc: 'Return a string that indicates the MySQL server version '},
		{name:'WAIT_FOR_EXECUTED_GTID_SET()', desc: 'Wait until the given GTIDs have executed on slave. '},
		{name:'WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS()', desc: 'Wait until the given GTIDs have executed on slave. '},
		{name:'WEEK()', desc: 'Return the week number '},
		{name:'WEEKDAY()', desc: 'Return the weekday index '},
		{name:'WEEKOFYEAR()', desc: 'Return the calendar week of the date (1-53) '},
		{name:'WEIGHT_STRING()', desc: 'Return the weight string for a string '},
		{name:'Within() (deprecated 5.7.6)', desc: 'Whether MBR of one geometry is within MBR of another '},
		{name:'X() (deprecated 5.7.6)', desc: 'Return X coordinate of Point '},
		{name:'XOR', desc: 'Logical XOR '},
		{name:'Y() (deprecated 5.7.6)', desc: 'Return Y coordinate of Point '},
		{name:'YEAR()', desc: 'Return the year '},
		{name:'YEARWEEK()', desc: 'Return the year and week '}
   ]
});
